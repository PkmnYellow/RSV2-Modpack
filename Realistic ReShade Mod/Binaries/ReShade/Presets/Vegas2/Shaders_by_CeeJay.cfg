
////---------//
///**ASCII**///
//---------////
#define USE_ASCII 0 //[Ascii] //-Ascii : Converts the image to Ascii-art.

//>Ascii settings<\\
#define Ascii_input_image 1 //[1:2] //-1 = Color buffer, 2 = Depth buffer.
#define Ascii_spacing 1 //[0:9] //-Determines the spacing between characters. I feel 1 to 3 looks best.
#define Ascii_font 2 //[1:2] //-1 = 5x5 font, 2 = 3x5 font
#define Ascii_font_color float3(255,255,255) //[0:255] //-What color the font should be. In integer RGB colors. X = Red, Y = Green, Z = Blue
#define Ascii_background_color float3(0,0,0) //[0:255] //-What color the background should be. In integer RGB colors. X = Red, Y = Green, Z = Blue
#define Ascii_font_color_mode 1 //[0:2] //-0 = font_color, 1 = image color, 2 = colorized grayscale
#define Ascii_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Key used to toggle the effect on and off. Go to ReShade/Common/KeyCodes.h for additional key codes.


////--------//
///**SMAA**///
//--------////
#define USE_SMAA 0 //[SMAAWrap] //-SMAA Anti-aliasing : Smoothens jagged lines using the SMAA technique.

//>SMAA Anti-aliasing settings<\\
#define SMAA_THRESHOLD 0.10 //[0.05:0.20] //-Edge detection threshold. If SMAA misses some edges try lowering this slightly. I prefer between 0.08 and 0.12.
#define SMAA_MAX_SEARCH_STEPS 98 //[0:98] //-Determines the radius SMAA will search for aliased edges
#define SMAA_MAX_SEARCH_STEPS_DIAG 16 //[0:16] //-Determines the radius SMAA will search for diagonal aliased edges
#define SMAA_CORNER_ROUNDING 0 //[0:100] //-Determines the percent of antialiasing to apply to corners. 0 seems to affect fine text the least so it's the default.
#define SMAA_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-

//>Advanced SMAA settings<\\
#define SMAA_EDGE_DETECTION 1 //[1|2|3] //-1 = Luma edge detection, 2 = Color edge detection, 3 = Depth edge detection
#define SMAA_DIRECTX9_LINEAR_BLEND 0 //[0:1] //-Using DX9 HARDWARE? (software version doesn't matter) if so this needs to be 1 - If not, leave it at 0. Enable this only if you use a Geforce 7xxx series or older card, or a Radeon X1xxx series or older card.

//>SMAA Predication settings<\\
#define SMAA_PREDICATION 0 //[0:1] //-Enables predication which uses BOTH the color and the depth texture for edge detection to more accurately detect edges.
#define SMAA_PREDICATION_THRESHOLD 0.001 //[undef] //-Threshold to be used in the depth buffer. 
#define SMAA_PREDICATION_SCALE 2.0 //[undef] //-How much to scale the global threshold used for luma or color edge detection when using predication
#define SMAA_PREDICATION_STRENGTH 0.4 //[undef] //-How much to locally decrease the threshold.

//>Debug SMAA settings<\\
#define SMAA_DEBUG_OUTPUT 0 //[0:4] //-No description given


////--------//
///**FXAA**///
//--------////
#define USE_FXAA 0 //[FXAAWrap] //-FXAA Anti-aliasing : Smoothens jagged lines using the FXAA technique.

//>FXAA Anti-aliasing settings<\\
#define FXAA_QUALITY__PRESET 9 //[1:9] //-Choose the quality preset. 9 is the highest quality.
#define fxaa_Subpix 0.000 //[0.000:1.000] //-Choose the amount of sub-pixel aliasing removal. Higher values makes the image softer/blurrier.
#define fxaa_EdgeThreshold 0.166 //[0.000:1.000] //-Edge detection threshold. The minimum amount of local contrast required to apply algorithm. Similar to SMAA_THRESHOLD
#define fxaa_EdgeThresholdMin 0.000 //[0.000:1.000] //-Darkness threshold. Pixels darker than this are not processed in order to increase performance.
#define FXAA_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////-------------//
///**EXPLOSION**///
//-------------////
#define USE_EXPLOSION 0 //[Explosion] //-Explosion : Scatters the pixels, making the image look fuzzy.

//>Explosion settings<\\
#define Explosion_Radius 2.0 //[0.2:100.0] //-Amount of effect you want.
#define Explosion_TimeOut 0 //[0:100000] //-Defined Toggle Key will activate the shader until time (in ms) runs out. "0" deactivates the timeout feature.
#define Explosion_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////------//
///**CA**///
//------////
#define USE_CA 0 //[CA] //-Chromatic Aberration : Mimics the look of a cheap camera lens, by distorting the colors.

//>Chromatic Aberration settings<\\
#define Chromatic_shift float2(2.5,-0.5) //[-100.0:100.0] //-Distance (X,Y) in pixels to shift the color components. For a slightly blurred look try fractional values (.5) between two pixels.
#define Chromatic_strength 0.5 //[0.0:1.0] //-Adjust the strength of the effect.
#define CA_TimeOut 0 //[0:100000] //-Defined Toggle Key will activate the shader until time (in ms) runs out. "0" deactivates the timeout feature.
#define CA_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////-----------//
///**CARTOON**///
//-----------////
#define USE_CARTOON 0 //[Cartoon] //-Cartoon : "Toon"s the image.

//>Cartoon settings<\\
#define CartoonPower 1.5 //[0.1:10.0] //-Amount of effect you want.
#define CartoonEdgeSlope 1.5 //[0.1:8.0] //-Raise this to filter out fainter edges. You might need to increase the power to compensate. Whole numbers are faster.
#define Cartoon_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////----------------//
///**ADVANCED_CRT**///
//----------------////
#define USE_ADVANCED_CRT 0 //[AdvancedCRT] //-Advanced CRT : Simulates an old CRT TV display. (has a very high performance cost)

//>Advanced CRT settings<\\
#define CRTAmount 0.06 //[0.00:1.00] //-Amount of CRT effect you want
#define CRTResolution 1.15 //[1.00:8.00] //-Input size coefficent (low values gives the "low-res retro look"). Default is 1.2
#define CRTgamma 2.4 //[0.0:4.0] //-Gamma of simulated CRT (default 2.2)
#define CRTmonitorgamma 2.2 //[0.0:4.0] //-Gamma of display monitor (typically 2.2 is correct)
#define CRTBrightness 0.9 //[0.0:3.0] //-Used to boost brightness a little. Default is 1.0
#define CRTScanlineIntensity 2.0 //[2.0:4.0] //-Scanlines intensity (use integer values preferably). Default is 2.0
#define CRTScanlineGaussian 1 //[0:1] //-Use the "new nongaussian scanlines bloom effect". Default is on
#define CRTCurvature 0 //[0:1] //-"Barrel effect" enabled (1) or off (0)
#define CRTCurvatureRadius 1.5 //[0.0:2.0] //-Curvature Radius (only effective when Curvature is enabled). Default is 1.5
#define CRTCornerSize 0.0100 //[0.0000:0.0200] //-Higher values, more rounded corner. Default is 0.001
#define CRTDistance 2.00 //[0.00:4.00] //-Simulated distance from viewer to monitor. Default is 2.00
#define CRTAngleX 0.00 //[-0.20:0.20] //-Tilt angle in radians (X coordinates)
#define CRTAngleY 0.00 //[-0.20:0.20] //-Tilt angle in radians (Y coordinates). (Value of -0.15 gives the 'arcade tilt' look)
#define CRTOverScan 1.01 //[1.00:1.10] //-Overscan (e.g. 1.02 for 2% overscan). Default is 1.01
#define CRTOversample 1 //[0:1] //-Enable 3x oversampling of the beam profile (warning : performance hit)
#define AdvancedCRT_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////----------------//
///**PIXELART_CRT**///
//----------------////
#define USE_PIXELART_CRT 0 //[PixelartCRT] //-PixelArt CRT : Scanlines for pixel art (high performance cost)

//>Emulated input resolution<\\
#define PixelArtCRT_resolution_mode 1 //[1:2] //-1 = Ratio, 2 = Fixed resolution
#define PixelArtCRT_resolution_ratio (1.0/4.0) //[undef] //-
#define PixelArtCRT_fixed_resolution float2(320.0,160.0) //[undef] //-

//>Hardness<\\
#define PixelArtCRT_hardScan -24.0 //[-24.0:0.0] //-Hardness of scanline : -8.0 = soft, -16.0 = medium
#define PixelArtCRT_hardPix -24.0 //[undef] //-Hardness of pixels in scanline : -2.0 = soft, -4.0 = hard

//>Display warp<\\
#define PixelArtCRT_warp float2(1.0/64.0,1.0/24.0) //[undef] //-Display warp : 0.0 = none , 1.0/8.0 = extreme

//>Type of shadow mask<\\
#define PixelArtCRT_ShadowMask 3 //[1:4] //-Type of shadow mask : 1 = Very compressed TV style shadow mask, 2 = Aperture-grille, 3 = Stretched VGA style shadow mask, 4 = VGA style shadow mask

//>Amount of shadow mask<\\
#define PixelArtCRT_maskDark 0.5 //[0.0:2.0] //-
#define PixelArtCRT_maskLight 1.5 //[0.0:2.0] //-

//>Falloff shape<\\
#define PixelArtCRT_shape 3.0 //[undef] //-Falloff shape : 1.0 = exp(x), 1.25 = in between, 2.0 = gaussian, 3.0 = more square

//>Amp signal<\\
#define PixelArtCRT_overdrive 1.25 //[0.00:3.00] //-

//>Toggle Key<\\
#define PixelArt_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////---------//
///**BLOOM**///
//---------////
#define USE_BLOOM 0 //[Bloom] //-Bloom : Makes bright lights bleed their light into their surroundings (relatively high performance cost)

//>Bloom settings<\\
#define BloomThreshold 23.25 //[0.00:50.00] //-Threshold for what is a bright light (that causes bloom) and what isn't.
#define BloomPower 1.300 //[0.000:8.000] //-Strength of the bloom
#define BloomWidth 0.5000 //[0.0000:1.0000] //-Width of the bloom
#define Bloom_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////-------//
///**HDR**///
//-------////
#define USE_HDR 0 //[HDR] //-HDR : Not actual HDR - It just tries to mimic an HDR look (relatively high performance cost)

//>HDR settings<\\
#define HDRPower 1.15 //[0.00:8.00] //-Strangely lowering this makes the image brighter
#define radius2 0.84 //[0.00:8.00] //-Raising this seems to make the effect stronger and also brighter
#define HDR_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////---------------//
///**LUMASHARPEN**///
//---------------////
#define USE_LUMASHARPEN 0 //[LumaSharpen] //-LumaSharpen : Sharpens the image.

//>LumaSharpen settings<\\
#define sharp_strength 0.65 //[0.10:3.00] //-Strength of the sharpening
#define sharp_clamp 0.035 //[0.000:1.000] //-Limits maximum amount of sharpening a pixel recieves - Default is 0.035

//>Advanced sharpening settings<\\
#define pattern 2 //[1|2|3|4] //-Choose a sample pattern. 1 = Fast, 2 = Normal, 3 = Wider, 4 = Pyramid shaped.
#define offset_bias 1.0 //[0.0:6.0] //-Offset bias adjusts the radius of the sampling pattern. I designed the pattern for offset_bias 1.0, but feel free to experiment.

//>Debug sharpening settings<\\
#define show_sharpen 0 //[0:1] //-Visualize the strength of the sharpen (multiplied by 4 to see it better)
#define LumaSharpen_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-


////-------------------//
///**LENS_DISTORTION**///
//-------------------////
#define USE_LENS_DISTORTION 0 //[LensDistortion] //-Cubic Lens Distortion : Distorts the lens cubicly.


////-------------//
///**NOSTALGIA**///
//-------------////
#define USE_NOSTALGIA 0 //[Shared] //-Nostalgia : Remember when you played that game you always played on that first system of yours? You don't? Well here is a reminder.


////----------//
///**LEVELS**///
//----------////
#define USE_LEVELS 0 //[Shared] //-Levels : Sets a new black and white point. This increases contrast but causes clipping. Use Curves instead if you want to avoid that.

//>Levels settings<\\
#define Levels_black_point 3 //[0:255] //-The black point is the new black - literally. Everything darker than this will become completely black. Default is 16.0
#define Levels_white_point 255 //[0:255] //-The new white point. Everything brighter than this becomes completely white. Default is 235.0

//>Debug settings<\\
#define Levels_highlight_clipping 0 //[0:1] //-Colors between the two points will stretched, which increases contrast, but details above and below the points are lost (this is called clipping). Highlight the pixels that clip. Red = Some detail is lost in the highlights, Yellow = All detail is lost in the highlights, Blue = Some detail is lost in the shadows, Cyan = All detail is lost in the shadows.


////---------------//
///**TECHNICOLOR**///
//---------------////
#define USE_TECHNICOLOR 0 //[Shared] //-TECHNICOLOR : Attempts to mimic the look of an old movie using the Technicolor three-strip color process (Techicolor Process 4) 1

//>TECHNICOLOR settings<\\
#define TechniAmount 0.40 //[0.00:1.00] //-
#define TechniPower 4.00 //[0.00:8.00] //-
#define redNegativeAmount 0.88 //[0.00:1.00] //-
#define greenNegativeAmount 0.88 //[0.00:1.00] //-
#define blueNegativeAmount 0.88 //[0.00:1.00] //-


////----------------//
///**TECHNICOLOR2**///
//----------------////
#define USE_TECHNICOLOR2 0 //[Shared] //-TECHNICOLOR 2 : Yet another Technicolor effect - not sure if this stays or not. Let me know if you like it.

//>TECHNICOLOR 2 settings<\\
#define Technicolor2_Red_Strength 0.20 //[0.05:1.0] //-Color Strength of Red channel. Higher means darker and more intense colors. 
#define Technicolor2_Green_Strength 0.20 //[0.05:1.0] //-Color Strength of Green channel. Higher means darker and more intense colors.
#define Technicolor2_Blue_Strength 0.20 //[0.05:1.0] //-Color Strength of Blue channel. Higher means darker and more intense colors.
#define Technicolor2_Brightness 1.0 //[0.5:1.5] //-Brightness Adjustment, higher means brighter image.
#define Technicolor2_Strength 1.0 //[0.0:1.0] //-Strength of Technicolor effect. 0.0 means original image.
#define Technicolor2_Saturation 0.7 //[0.0:1.5] //-Additional saturation control since technicolor tends to oversaturate the image.


////-------//
///**DPX**///
//-------////
#define USE_DPX 0 //[Shared] //-Cineon DPX : Should make the image look like it's been converted to DXP Cineon - basically it's another movie-like look similar to technicolor.

//>Cineon DPX settings<\\
#define Red 8.0 //[1.0:15.0] //-
#define Green 8.0 //[1.0:15.0] //-
#define Blue 8.0 //[1.0:15.0] //-
#define ColorGamma 2.5 //[0.1:2.5] //-Adjusts the colorfulness of the effect in a manner similar to Vibrance. 1.0 is neutral.
#define DPXSaturation 3.0 //[0.0:8.0] //-Adjust saturation of the effect. 1.0 is neutral.
#define RedC 0.36 //[0.20:0.60] //-
#define GreenC 0.36 //[0.20:0.60] //-
#define BlueC 0.34 //[0.20:0.60] //-
#define Blend 0.20 //[0.00:1.00] //-How strong the effect should be.


////--------------//
///**MONOCHROME**///
//--------------////
#define USE_MONOCHROME 0 //[Shared] //-Monochrome : Monochrome makes the colors disappear.

//>Monochrome settings<\\
#define Monochrome_conversion_values float3(0.21,0.72,0.07) //[0.00:1.00] //-No description given


////---------------//
///**COLORMATRIX**///
//---------------////
#define USE_COLORMATRIX 0 //[Shared] //-Color Matrix : Allows color modification using a user-defined color matrix.

//>Color Matrix settings<\\
#define ColorMatrix_Red float3(0.900,0.100,0.000) //[0.00:1.00] //-How much of Red, Green and Blue the new red value should contain - Should sum to 1.000 if you don't wish to change the brightness
#define ColorMatrix_Green float3(0.000,1.000,0.000) //[0.00:1.00] //-How much of Red, Green and Blue the new green value should contain - Should sum to 1.000 if you don't wish to change the brightness
#define ColorMatrix_Blue float3(0.000,0.000,1.000) //[0.00:1.00] //-How much of Red, Green and Blue the new blue value should contain - Should sum to 1.000 if you don't wish to change the brightness
#define ColorMatrix_strength 1.0 //[0.0:2.0] //-Adjust the strength


////-----------------//
///**LIFTGAMMAGAIN**///
//-----------------////
#define USE_LIFTGAMMAGAIN 0 //[Shared] //-Lift Gamma Gain : Adjust brightness and color of shadows, midtones and highlights.

//>Lift Gamma Gain settings<\\
#define RGB_Lift float3(0.995,1.010,0.995) //[0.000:2.000] //-Adjust shadows for Red, Green and Blue. Note that a value of 1.000 is a neutral setting that leave the color unchanged. X = Red, Y = Green, Z = Blue
#define RGB_Gamma float3(1.000,1.000,1.000) //[0.000:2.000] //-Adjust midtones for Red, Green and Blue. Note that a value of 1.000 is a neutral setting that leave the color unchanged. X = Red, Y = Green, Z = Blue
#define RGB_Gain float3(1.000,1.000,1.000) //[0.000:2.000] //-Adjust highlights for Red, Green and Blue. Note that a value of 1.000 is a neutral setting that leave the color unchanged. X = Red, Y = Green, Z = Blue


////-----------//
///**TONEMAP**///
//-----------////
#define USE_TONEMAP 1 //[Shared] //-Tonemap : Adjust gamma, exposure, saturation, bleach and defog. (may cause clipping)

//>Tonemap settings<\\
#define Gamma 1.200 //[0.000:2.000] //-Adjust midtones. 1.000 is neutral. This setting does exactly the same as the one in Lift Gamma Gain, only with less control.
#define Exposure 0.000 //[-1.000:1.000] //-Adjust exposure
#define Saturation 0.420 //[-1.000:1.000] //-Adjust saturation
#define Bleach 0.000 //[0.000:1.000] //-Brightens the shadows and fades the colors
#define Defog 0.000 //[0.000:1.000] //-How much of the color tint to remove
#define FogColor float3(0.00,0.00,2.55) //[0.00:2.55] //-What color to remove - default is blue


////------------//
///**VIBRANCE**///
//------------////
#define USE_VIBRANCE 0 //[Shared] //-Vibrance : Intelligently saturates (or desaturates if you use negative values) the pixels depending on their original saturation.

//>Vibrance settings<\\
#define Vibrance 1.00 //[-1.00:1.00] //-Intelligently saturates (or desaturates if you use negative values) the pixels depending on their original saturation.
#define Vibrance_RGB_balance float3(1.00,0.70,1.00) //[-10.00:10.00] //-A per channel multiplier to the Vibrance strength so you can give more boost to certain colors over others. X = Red, Y = Green, Z = Blue


////----------//
///**CURVES**///
//----------////
#define USE_CURVES 0 //[Shared] //-Curves : Contrast adjustments using S-curves.

//>Curves settings<\\
#define Curves_mode 0 //[0|1|2] //-Choose what to apply contrast to. 0 = Luma, 1 = Chroma, 2 = both Luma and Chroma. Default is 0 (Luma)
#define Curves_contrast 0.65 //[-1.00:1.00] //-The amount of contrast you want

//>Advanced curve settings<\\
#define Curves_formula 5 //[1|2|3|4|5|6|7|8|9|10|11] //-The contrast s-curve you want to use. 1 = Sine, 2 = Abs split, 3 = Smoothstep, 4 = Exp formula, 5 = Simplified Catmull-Rom (0,0,1,1), 6 = Perlins Smootherstep, 7 = Abs add, 8 = Techicolor Cinestyle, 9 = Parabola, 10 = Half-circles. 11 = Polynomial split. Note that Technicolor Cinestyle is practically identical to Sine, but runs slower. In fact I think the difference might only be due to rounding errors. I prefer 2 myself, but 3 is a nice alternative with a little more effect (but harsher on the highlight and shadows) and it's the fastest formula.


////---------//
///**SEPIA**///
//---------////
#define USE_SEPIA 1 //[Shared] //-Sepia : Sepia tones the image.

//>Sepia settings<\\
#define ColorTone float3(0.51,1.53,2.55) //[0.00:2.55] //-What color to tint the image.
#define GreyPower 0.15 //[0.00:1.00] //-How much desaturate the image before tinting it.
#define SepiaPower 0.12 //[0.00:1.00] //-How much to tint the image.


////--------------//
///**FILMICPASS**///
//--------------////
#define USE_FILMICPASS 0 //[Shared] //-Filmic Pass: Applies some common color adjustments to mimic a more cinema-like look.

//>FilmicPass settings<\\
#define Strenght 0.85 //[0.05:1.50] //-Strength of the color curve altering
#define BaseGamma 1.0 //[0.7:2.0] //-Gamma Curve
#define Fade 0.4 //[0.0:0.6] //-Decreases contrast to imitate faded image
#define Contrast 1.0 //[0.5:2.0] //-Contrast.
#define FBleach 0.00 //[-0.50:1.00] //-More bleach means more contrasted and less colorful image
#define FSaturation -0.15 //[undef] //-
#define FRedCurve 1.0 //[undef] //-
#define FGreenCurve 1.0 //[undef] //-
#define FBlueCurve 1.0 //[undef] //-
#define BaseCurve 1.5 //[undef] //-
#define Linearization 0.50 //[0.50:2.00] //-No description given
#define EffectGammaR 1.0 //[undef] //-
#define EffectGammaG 1.0 //[undef] //-
#define EffectGammaB 1.0 //[undef] //-
#define EffectGamma 0.65 //[undef] //-
#define LumCoeff float3(0.212656,0.715158,0.072186) //[undef] //-


////------------------//
///**REINHARDLINEAR**///
//------------------////
#define USE_REINHARDLINEAR 0 //[Shared] //-Reinhard: Reinhard mixed with some linear tonemapping.

//>ReinhardLinear settings<\\
#define ReinhardLinearSlope 2.25 //[1.00:5.00] //-how steep the color curve is at linear point. You need color curve understanding to know what this means, just experiment.
#define ReinhardLinearWhitepoint 3.0 //[undef] //-
#define ReinhardLinearPoint 0.15 //[undef] //-


////-------------//
///**FILMGRAIN**///
//-------------////
#define USE_FILMGRAIN 0 //[Shared] //-Film Grain : Adds film grain to the image. A side effect of the Film Grain effect is that it also dithers the screen. You don't need both the Film Grain and the Dither effect enabled at the same time.

//>Film Grain settings<\\
#define FilmGrain_intensity 0.50 //[0.00:1.00] //-How visible the grain is. Higher is more visible.
#define FilmGrain_variance 0.40 //[0.00:1.00] //-Controls the variance of the gaussian noise. Lower values look smoother.
#define FilmGrain_SNR 6 //[0:16] //-Higher Signal-to-Noise Ratio values give less grain to brighter pixels. 0 disables this feature.

//>Advanced Film Grain settings<\\
#define FilmGrain_mean 0.50 //[0.00:1.00] //-The average mean of the gaussian noise. Probably best kept at the middle value (0.50)


////------------//
///**VIGNETTE**///
//------------////
#define USE_VIGNETTE 0 //[Shared] //-Vignette : Darkens the edges of the image to make it look more like it was shot with a camera lens. May cause banding artifacts.

//>Vignette settings<\\
#define VignetteType 1 //[1|2|3] //-1 = Original, 2 = New, 3 = TV style
#define VignetteRatio 1.00 //[0.15:6.00] //-Sets a width to height ratio. 1.00 (1/1) is perfectly round, while 1.60 (16/10) is 60 % wider than it's high.
#define VignetteRadius 2.00 //[-1.00:3.00] //-lower values = stronger radial effect from center
#define VignetteAmount -1.00 //[-2.00:1.00] //-Strength of black. -2.00 = Max Black, 1.00 = Max White.
#define VignetteSlope 2 //[2:16] //-How far away from the center the change should start to really grow strong (odd numbers cause a larger fps drop than even numbers)
#define VignetteCenter float2(0.500,0.500) //[0.000:1.000] //-Center of effect for VignetteType 1. 2 and 3 do not obey this setting.


////----------//
///**DITHER**///
//----------////
#define USE_DITHER 1 //[Shared] //-Dither : Applies dithering to simulate more colors than your monitor can display. This lessens banding artifacts (mostly caused by Vignette). Note that the patterns used by Dither, makes an image harder to compress. This can make your screenshots and video recordings take up more space.

//>Dither settings<\\
#define dither_method 2 //[1:2] //-1 = Ordered dithering (very good and very fast), 2 = Random dithering (different but slightly slower dithering)


////----------//
///**BORDER**///
//----------////
#define USE_BORDER 0 //[Shared] //-Border : Can be used to create letterbox borders around the image.

//>Border settings<\\
#define border_width float2(0,1) //[0:2048] //-(X,Y)-width of the border. Measured in pixels. If this is set to 0,0 then the border_ratio will be used instead
#define border_color float3(0,0,0) //[0:255] //-What color the border should be. In integer RGB colors, meaning 0,0,0 is black and 255,255,255 is full white.
#define border_ratio float(2.35/1.0) //[undef] //-[0.1000 to 10.0000] Set the desired ratio for the visible area. You MUST use floating point - Integers do not work right. Examples that work: (1680.0 / 1050.0), (16.0 / 10.0), (1.6) Examples that does NOT work right: (1680 / 1050), (16 / 10)


////----------------//
///**DisplayDepth**///
//----------------////
#define USE_DisplayDepth 0 //[DisplayDepth] //-Display Depth : Enables the possibility to display the depth buffer - You will still need to toogle it on/off with (F12) in-game

//>Display Depth Settings<\\
#define Depth_ToggleKey VK_F12 //[undef] //-Set the key to toggle the depth view On/Off

